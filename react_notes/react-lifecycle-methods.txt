**********The Lifecycle methods
Every React component you create always goes through a series of phases from its birth to death. You can think of these components going through a cycle of birth, growth and finally death.

At every phase, there are lifecycle methods that React calls to perform some certain functions. Now, React allows us to override these methods. But before we get to that, let’s briefly discuss the component phases.

In React, these phases are mainly three.

Mounting: As the name implies, this is the phase when React component mounts (created and inserted) the DOM. In this phase, the component is birthed.

Updating: Once the component is mounted, it could get updated. Remember that component gets updated when there is/are state or prop changes, hence trigger re-rendering. All of that happens in this phase.

Unmounting: This phase ends the component lifecycle because, in it, the component is removed from the DOM.

In each of these phases, React provides lifecycle methods that we can use to monitor and manipulate what happens within the component.

Though, we have been using one of these lifecycle methods – the render() method. This method is the only required lifecycle method within a React class component. It’s responsible for rendering React elements in the Virtual DOM and it is called during the mounting and updating phase.

The common ones in addition to the render() method include:

componentDidMount() – This lifecycle method is called immediately after a component is rendered.

componentDidUpdate() – This is called immediately after updating occurs.

componentWillUnmount() – This is called just before a component is unmounted or destroyed.



**********The componentDidMount() method
As mentioned earlier, it is called immediately after the component is rendered. Like the render() method, it belongs to the mounting phase. Just that the render() is invoked before React updates the actual DOM.

As a beginner, you will most likely be working with the componentDidMount(). This is because you’ll often perform some sort of effects (or side-effects). For instance, making a network request, subscriptions, setting up a timer, setting up event listeners etc are examples of side effects that you can perform in this method.

We’ll discuss them in details when we get to functional Hooks. For now, know that a function is said to have side effects if it modifies anything outside its body. This makes it an impure function.

As you may know, classes are a type function as well.

These effects are not allowed in the render() method. Not only because the render should be kept pure but also it is invoked too early. And you’d want to perform any of these side effects after React has updated the DOM.

So a good place to perform these type of operations is the componentDidMount() method. It ensures that your data execute immediately the component mount the DOM.

We will see later how we can utilize this method and read our todos items from the local storage.


**********Fetching data from a remote endpoint
In our todos app, we can make all sort of HTTP request (like GET, POST or DELETE data) to and from a remote endpoint. So instead of manually adding the default to-dos items, we can request the data from the server and list them on the frontend.

To fetch the data, we will make use of the fetch() method from the native Fetch API to perform this request and handles the responses. We can also make use of a library like Axios to do the same.



**********The componentDidUpdate() method
This is another important lifecycle method that allows you to define side effects. As I mentioned earlier, it is called immediately after updating occurs – i.e after state or props changes.

So it is ideal when you need to perform an operation after the DOM is updated. DOM manipulation, data fetching that only occurs when a specific condition is met etc. are operations that can go inside this lifecycle.

To use it, you’ll have something like this:

componentDidUpdate(prevProps, prevState) {
  // update logic here
}


The method arguments allow us to compare the prevProps or prevState with their current snapshot inside the componentDidUpdate. This ensures we can control how often the lifecycle runs after the component update. Without these parameters, it may run infinitely if it has a call to state update. This is because the setState causes a new render.

We can control it by writing an extra comparison like so:

componentDidUpdate(prevProps, prevState) {
  if(prevState.todos !== this.state.todos) {
    // logic here
  }
}


The prevProps and prevState are simply the state and props before the update. We are using them to skip applying an effect if certain values haven’t changed between re-renders.

Whether or not you are having a call to update the state, always makes it your duty to have a check in the lifecycle. This saves you the stress associated with the method.

Like the state, you can also compare the prevProps with its current snapshot if the component has access to the prop.



**********Persisting the todos data to local storage
Now that you know what the componentDidMount and the componentDidUpdate are. We will use them in the process of saving and retrieving data from the browser storage.

The logic here is simple. Whenever our application mounts on the screen and the user interact with the app by inputting the to-dos data, we will save the to-dos item(s) in the local storage. This sounds like the logic should be in the componentDidUpdate lifecycle. Yes, it is.

However, on component mounts (i.e on page reload or on a subsequent visit), we will check if there are to-dos items present in the local storage, then, we grab them. This sounds like the logic should be in the componentDidMount lifecycle.

We will be using the local storage methods to achieve this.

All we are doing in the lifecycle is getting the present todos and storing them in the local storage. Remember, React will run the code once it detects an update

You should get your saved data once the component mount. Now, any data you add or modify will persist in the local storage and available at any time.

In the code, we simply get the data from the storage and update the state using the setState() method.


**********Using setState directly in the componentDidMount lifecycle
Calling the setState() in this method would trigger an extra rendering. That is, the render() will be called twice. Though it’s fine because it will happen before the browser updates the view. However, we should always use with caution or simply avoid it if you could to prevent any performance issue.

Since in our case, we want to display the stored item(s) after component render, we can simply assign the item(s) directly as the initial state.


**********The componentWillUnmount() method
Some component in React requires resources to be freed-up once they are destroyed and removed from view. Earlier, we mentioned how the componentDidMount allows us to perform side effects like the network request, setting up the timer or subscription. Now, once the component (performing these effects) is being removed from the DOM, we would like to do a clean-up like cancelling the network request, invalidating the timers, removing event listeners or cleaning up any subscription. This is necessary to prevent a memory leak.

The lifecycle method that React calls in this phase (i.e when a component is about to be destroyed or removed from the DOM) is the componentWillUnmount() method.

To show you how it works, we will be logging a message to the console whenever any of the todos items are being removed from the DOM.
