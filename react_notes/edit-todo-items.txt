***HOW TO EDIT TODOS ITEMS IN A REACT APP
The logic here is simple. Once we double click the item to edit, we will activate the edit mode and display a text input field containing the item to edit so that users can modify.

Add a state object in the class component and set the edit mode to false by default.

state = {
  editing: false,
}

We will change this to true using the setState() method once we double click any of the items. We will also use the state value to dynamically hide/display the text field.

Remember this function is called once you double click an item.

Still in the file, let’s add the logic that dynamically hides/display the todos/ text field.

At the moment, the input field has the default HTML behavior because it is being handled by the DOM. If you have been following the series from the beginning, you should know that React doesn’t work that way.

The field needs to be a controlled field.

To do this, we need to make sure that the value prop of the text input is not null or undefined.

In the code, we assigned a default text (i.e the todos title) to the value prop. This makes sense because that is what we want to modify.

And remember, we have access to the title in this component.

Now, you cannot change the edit field text unless you control it. If you open the console, React is already yelling at us to add an onChange event handler to control it.

Remember how we’ve been raising and handling the event in this series? We will do the same thing here!

The todos items that we want to update live in the TodoContainer component. So we need to raise an event from the TodoItem component and handle it in the TodoContainer.

As expected, we need to ensure there is communication between these components.

Starting from the parent, TodoContainer, add this method above the render():

setUpdate = (updatedTitle, id) => {
  console.log(updatedTitle, id)
}

The method expects the updated title and the id of the text input performing the action.

Now, let’s pass the method to the TodosList component through the props.
We can pass it to the TodoItem component. In the TodoItem component, update the onChange to point to the setUpdate() method:

<input
  type="text"
  style={editMode}
  className={styles.textInput}
  value={title}
  onChange={e => {
    this.props.setUpdate(e.target.value, id)
  }}
/>

We need to update the items in the TodoContainer state object.

As expected, we will make use of the setState() method to do that. So update the setUpdate() in the TodoContainer.js file so you have:

setUpdate = (updatedTitle, id) => {
  this.setState({
    todos: this.state.todos.map(todo => {
      if (todo.id === id) {
        todo.title = updatedTitle
      }
      return todo
    }),
  })
}


***DETECTING WHEN THE USERS PRESS THE ENTER KEY TO SUBMIT EDITED ITEMS
As soon as we submit the edited value, we need to trigger a method that reset the edit mode to false thereby hiding the edit field.

To do this, we will listen for the keydown event that fires when any key is pressed. Then, we check for the Enter key using the event.key.
