React icons export icons as React component and uses the ES6 import to include the icons in your project.

We will use the FaPlusCircle in the InputTodo.js file to replace the "Submit" text and FaTrash in the TodoItem.js file to replace the "Delete" text.

Open the InputTodo.js file and add this to the top of the file:

import { FaPlusCircle } from "react-icons/fa"
Then, find this line:

<button className="input-submit">Submit</button>
And replace the text with the Icon component.

<button className="input-submit">
  <FaPlusCircle />
</button>

Save the file and head over to the TodoItem.js file.

Add this to the top of the file:

import { FaTrash } from "react-icons/fa"
Then, find this:

<button onClick={() => props.deleteTodoProps(id)}>Delete</button>
And replace with this:

<button onClick={() => props.deleteTodoProps(id)}>
  <FaTrash />
</button>

**********Styling React Icons
By default, these icons inherit the CSS styles of the parent element. You can go ahead and style them directly in your CSS file as SVGs by targeting its parent element.

.input-submit svg {
  color: darkcyan;
  font-size: 20px;
  margin-top: 2px;
}
React icons also allows us to pass unique props (including color, size and className) to style individual icons.

<button className="input-submit">
  <FaPlusCircle color="darkcyan" size="20px" className="submit-icon" />
</button>
Also, like the JSX element, you can pass the style prop to customize your icons. We will go with this approach.

Back to the InputTodo.js file. Update the icon so you have:

<button className="input-submit">
  <FaPlusCircle
    style={{ color: "darkcyan", fontSize: "20px", marginTop: "2px" }}
  />
</button>


**********Styling React Icons using the IconContext
You may want to style multiple side-by-side icons at a go without wanting to target them in your CSS file (an easier method). React icons allows us to configure icons props using the React Context API.

Well, you don’t have to know the Context API to implement it. It’s very straight forward.

First, you have to import the IconContext from the react-icons module.

import { IconContext } from "react-icons"
After that, you’ll wrap all of your icons with the Provider component and assign to the Provider value prop, an object consisting of unique keys (provided by react-icons) and value pairs.

You’ll have something like this:

<IconContext.Provider
  value={{
    color: "darkcyan",
    style: { fontSize: "20px", color: "#ff0000" },
    className: "submit-iconn",
  }}
>
  <button className="input-submit">
    <FaPlusCircle />
    <FaPlusCircle />
    <FaPlusCircle />
  </button>
</IconContext.Provider>

A few notes:

The style key (like the style attribute mentioned earlier in the series) accepts an object with camelCased properties, unlike the other available key that accepts a string.

The color assigned through the style key overrides that assigned directly to the value prop.

If you are like me, you’ll stick with the style and the global className keys.
