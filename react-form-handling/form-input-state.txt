Uncontrolled and Controlled Input
At the moment, just like pure HTML form, this input element maintains its internal state. That is why we can write something in it by default. In this case, we call this type of input an uncontrolled input.

In React, it is the responsibility of the component rendering the form to control the input state. This way, the input would no longer listen to its internal state but the state declared in its component. By so doing, we are making the component state a single source of truth.

When you have this type of input, then you have a controlled input.

How does it work?

Depending on your component type, you will store your input data in the component state. Here, we will be using the React Hook to manage our form data. However, the approach is the same if you are using a class-based component. All you have to do is to declare a state object where your data would live.

From there, you will set up logic to listen to changes in the input and control it (i.e update the state) using the onChange event. This way, you will always get up-to-date value.

The first step is to have the state manage the user’s input. So go ahead and update the src/App.js file to include the state.

In the code, we added a state using the useState Hook and assigned a default empty string to the state variable, fname. This is similar to declaring a state object in a class-based component.

The second item return by the useState Hook (I called it setFname, but you can name it anything you like) is a function that will allow us to update the state value.

Now, for us to make the input field a controlled input, we assigned the state variable (which contains a default empty string) to the value prop.

Now, if you try to write anything in the text input field, nothing will happen. This is because the value prop is assigned a state variable whose value is set to empty string. And this is being forced on the input.

This is good because we now have total control over the input state. Let’s go ahead and update it. Update the code to include an onChange event handler.

Now you should be able to write something in the input field. We are getting the most updated value on every keystroke.

What is happening?

React needs an onChange handler to keep track of any changes in the field. Anytime you write something in the input field, this onChange event will trigger and then call its handleChange function that will re-render the state using setFname function.

We are updating the state variable, fname on every keystroke by passing to it the current value of the input field using e.target.value.

At this point, we have a controlled input field where its state is being managed by its component.
