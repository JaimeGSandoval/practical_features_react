***Why do we need this storage?
Sometimes, we interact with a page and pass in data like form inputs; dark mode theme value; todos items etc. As users, you may need the data to be available on page refresh or your next visit.

Here in this section, you’ll learn to do that. To get started, let’s take a look at the Storage API.


Persisting the todos data to local storage
Now that you know what the componentDidMount and the componentDidUpdate are. We will use them in the process of saving and retrieving data from the browser storage.

The logic here is simple. Whenever our application mounts on the screen and the user interact with the app by inputting the to-dos data, we will save the to-dos item(s) in the local storage. This sounds like the logic should be in the componentDidUpdate lifecycle. Yes, it is.

However, on component mounts (i.e on page reload or on a subsequent visit), we will check if there are to-dos items present in the local storage, then, we grab them. This sounds like the logic should be in the componentDidMount lifecycle.

We will be using the local storage methods to achieve this.

All we are doing in the lifecycle is getting the present todos and storing them in the local storage. Remember, React will run the code once it detects an update

You should get your saved data once the component mount. Now, any data you add or modify will persist in the local storage and available at any time.

In the code, we simply get the data from the storage and update the state using the setState() method.
