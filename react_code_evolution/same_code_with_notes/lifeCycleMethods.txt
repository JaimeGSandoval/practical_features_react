LIFECYCLE METHODS OF CLASS COMPONENTS

When you create a react component the component goes through several stages in its life cycle.
React provides several methods that we can override at particular stages in the life cycle.

Class component life cycles have 4 phases
1. Mounting
2. Updating
3. Unmounting
4. Error Handling

Mounting lifecycle method is called when an instance of a component is being created an inserted in the DOM.
Updating lifecycle method is called when a component is being re-rendered as a result of changes to either its props or state.
Unmounting lifecycle method is called when a component is being removed from the DOM.
Error handling lifecycle method is called when there's an error during rendering in a lifecycle method, or in the constructor of any child component.

Mounting lifecycle has 4 methods:
 1. constructor
 2. static getDerivedStateFromProps
 3. render
 4. componentDidMount

Updating lifecycle has 5 methods:
 1. static getDerivedStateFromProps
 2. shouldComponentUpdate
 3. render
 4. getSnapshotBeforeUpdate
 5. componentDidUpdate

Unmounting lifecycle has 1 method:
 1. componentDidUnmount

Error handling has 2 methods:
 1. static getDerivedStateFromError
 2. componentDidCatch


MOUNTING LIFECYCLE METHODS
 1. constructor: A special function that will get called whenever a new component is created.
    Constructor is perfect for:
         - Initializing  state
         - Binding event handlers

    Do not do in constructor:
         - Do not cause side effects, Ex: HTTP requests

    Two important points for when creating a constructor:
         1. You have to call super(props) within the constructor. This will call the base class constructor. In the component you have access to this.props only after you've called super(props) passing in the props as an argument.
         2. Constructor is the only place place where you're expected to change or set the state by directly overriding this.state fields. Everywhere else you have to use this.setState().

 2. static getDerivedStateFromProps(props, state): Rarely used lifecycle method. This method is used when the state of the component depends on changes in the props over time. Say you have a component but the initial state of the component depends on the props being passed to the component. In such a scenario you can use this method to set the state. Since this is a static method it doesn't have access to the 'this' keyword, so you can't call this.setState(). Instead you have to return an object that represents the new state of the component or it returns null. Do not cause side effects Ex: HTTP requests.

 3. render: The only required method of a class component. In the render method we:
         1. read this.props
         2. return JSX that describes the UI

    The render method is a pure function. For the given prop and state it should always render the same UI.

    Do not do in the render method:
         1. Do not change state
         2. Interact with the DOM
         3. Make ajax calls

    Since the render method JSX which also contains the other children components right after the parent render method the children components lifecycle methods are also executed.

4. componentDidMount: Gets called only once in the whole lifecycle in a given component and it is invoked immediately after a component and all its children components have been rendered to the DOM.
         componentDidMount is perfect for causing side effects:
            1. Interact with the DOM
            2. Perform any ajax calls to load data

      It's a good place to perform initialization that requires DOM nodes and also load data by making network requests.


UPDATING LIFECYCLE METHODS
   These are methods that are called when a component is being re-rendered because of changes to either props or state.

   1. static getDerivedStateFromProps(props, state): Rarely used. Static method that takes props and state as parameters and has to return either null or an object that represents the updated state of the component. This method is called every time a component is re-rendered.

   2. shouldComponentUpdate(nextProps, nextState): Rarely used. dictates if the component should re-render or not. By default all class components will re-render whenever the props they receive or their state changes. This method can prevent that default behavior by returning false. In this method you can compare the existing props and state values with the next props and state values and return true or false to let react know whether the component should update or not.
            - This method is good for performance optimization
            - avoid causing any side effects. Ex: HTTP requests, calling the setState method

   3. render: The only required method of a class component. In the render method we:
         1. read this.props
         2. return JSX that describes the UI

    The render method is a pure function. For the given prop and state it should always render the same UI.

    Do not do in the render method:
         1. Do not change state
         2. Interact with the DOM
         3. Make ajax calls

    Since the render method JSX which also contains the other children components right after the parent render method the children components lifecycle methods are also executed.

    4. getSnapShotBeforeUpdate(prevProps, prevState): Rarely used. Called right before the changes from the virtual DOM are to be reflected in the DOM. You would use this method to:
                 - capture some info from the DOM.

    Method either returns null or returns a value. The returned value will be passed as the third parameter to the componentDidUpdate method.

    5. componentDidUpdate: This method is called after the render is finished in the re-render cycles. This means you can be sure the component and all it's sub components have properly rendered itself after the update. This method accepts three parameters: prevProps, prevState, and the snapshot value returned from getSnapShotBeforeUpdate. This method is guaranteed to be called only once in each re-render cycle.
    In this method you can:
              - cause side effects, Ex: ajax calls, but before your can make the ajax call you need to compare the the prevProps to the new props and then decide whether to make the ajax call or not. If you're not comparing you're making unwanted requests

UNMOUNTING LIFECYCLE METHOD
   Unmounting only has one method.

    1. componentWillUnmount: Method is invoked immediately before a component is unmounted and destroyed
          In this method you can:
            - Cancelling any network requests
            - removing any subscriptions
            - invalidating timers from setTimeout or setInterval

          Do not call the setState method because the component is never re-rendered after the component is unmounted

ERROR HANDLING LIFECYCLE METHODS
    When there is an error either during rendering, in a lifecycle method, or in the constructor of any child component.
    Error handling has 2 methods:

      1. static getDerivedStateFromError
      2. componentDidCatch

     Error boundaries catch errors during:
        1. rendering
        2. in lifecycle methods
        3. in the constructors of the whole tree below them

     They don catch errors inside event handlers. If you have an onClick handler and want to catch an error you just need to use the regular try catch


order of execution during mounting phase with a child component:
LifecycleA constructor
LifecycleA getDerivedStateFromProps
LifecycleA render
LifecycleB constructor
LifecycleB getDerivedStateFromProps
LifecycleB render
LifecycleB componentDidMount
LifecycleA componentDidMount

order of execution during updating phase w/ child component. Render and componentDidUpdate are the more commonly used methods during the update lifecycle. The other three methods exist for special cases and are to be used sparingly. If you use them make sure you know what you're doing.
LifecycleA getDerivedStateFromProps
LifecycleA shouldComponentUpdate
LifecycleA render
LifecycleB getDerivedStateFromProps
LifecycleB shouldComponentUpdate
LifecycleB render
LifecycleB getSnapShotBeforeUpdate
LifecycleA getSnapShotBeforeUpdate
LifecycleB componentDidUpdate
LifecycleA componentDidUpdate
